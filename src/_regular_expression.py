#!/usr/bin/python3

# 正则表达式

# 正则表达式是一个特殊的字符序列，方便检查一个字符串是否与某种模式匹配

import re

# re 模块使Python拥有全部的正则表达式功能

# compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象，该对象拥有一系列方法用于正则表达式匹配和替换

# re.match(pattern, string, flags=0)
# 从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none

# re.search(pattern, string, flags=0)
# 扫描整个字符串并返回第一个成功的匹配

# re.sub(pattern, repl, string, count=0)
# 用于替换字符串中的匹配项
# repl : 替换的字符串，也可为一个函数
# count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配

# 正则表达式模式
# 字母和数字表示他们自身
# 多数字母和数字前加一个反斜杠会拥有不同的含义
# 标点符号只有被转义时才匹配自身，否则他们表示特殊的含义
# 反斜杠本身需要使用反斜杠转义
# 由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示他们，

# ^ 开头
# $ 末尾

# . 匹配任意字符
# [] 表示一组字符
# [^ ] 匹配不在[] 中的字符
# re* 匹配0个或者多个的表达式
# re+ 匹配一个或者多个的表达式
# re? 匹配0个或者1个由前面的正则表达式定义的片段，非贪婪方式
# \w 匹配字母数字
# \W 匹配非字母数字
# \s 匹配任意空白字符
# \S 匹配任意非空字符
# \d 匹配任意数字
# \D 匹配任意非数字
# \A 匹配字符串开始
# \Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串
# \z 匹配字符串结束
# \G 匹配最后匹配完成的位置
# \b 匹配一个单词边界，也就是指单词和空格间的位置
# \B 匹配非单词边界



