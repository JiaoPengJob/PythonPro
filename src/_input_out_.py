#!/usr/bin/python3

# 输入和输出
# 还有使用文件对象的write()方法，标准输出文件可以使用sys.stdout引用
# 可以使用str.format() 函数来格式化输出值
# 将输出的值转换为字符串，可以使用repr() 或 str() 函数实现
# str() 函数返回一个用户易读的表达形式
# repr() 产生一个解释器易读的表达形式，可以转义字符串中的特殊字符，参数可以是Python中任何对象
mStr = "This is a 汉字"
print(str(mStr))
print(repr(mStr))  # 输出带单引号

# str.format() 括号及其里面的字符（称作格式化字段）将会被format() 中的参数替换
# 在括号中的数字用于指向传入对象在format() 中的位置
print("{}：姓名？{}：年龄？".format("玫瑰", 22))
print("{1}：{0}".format(66, "数量"))  # 数量指数从0开始

# 如果在format() 中使用了关键字参数，那么它们的值会指向使用该名字的参数
print("{name}：{age}".format(name="过客", age=88))

# 位置及关键字参数可以任意的组合
print("{0}{obj}：{1}".format("幸运数字", 446688, obj="是"))

# {} 中可以放入参数  !a（使用ascii()），!r（使用repr()）或者str()，用于在格式化某个值前对其进行转化
# 可选项  : 和格式标识符可以跟着字段名，这就允许对值进行更好的格式化
print("{0:.4f}".format(1234.0987654321))

# {:} 在: 后传入一个整数，可以保证该域至少有这么多的宽度，用于美化表格

# 如果有一个很长的格式化字符串，又不想分开，那么在格式化时通过变量名而非位置会很好
# 例如传入一个字典，使用[] 来访问键值
table = {"a": 1, "b": 2, "c": 3, "d": 4}
print("{0[b]:d}；{0[c]:d}；{0[a]:d}".format(table))
print("{a:d};{b:d}".format(**table))

# 读取键盘输入
# input() 置函数从标准输入读入一行文本，默认标准输入是键盘
# 默认是str格式，若需要数学计算，需要转换格式
str = input("开始输入：")
print(str)
